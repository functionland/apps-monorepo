// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        buildToolsVersion = "34.0.0"
        minSdkVersion = 26
        compileSdkVersion = 34
        targetSdkVersion = 34
        kotlinVersion = "1.8.20"
        enableHermes = true
        // We use NDK 23 which has both M1 support and is the side-by-side NDK version from AGP.
        ndkVersion = "26.2.11394342"
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath("com.android.tools.build:gradle:8.1.2")
        classpath("com.facebook.react:react-native-gradle-plugin")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
        // Add the dependency for the Google services Grad
        classpath 'com.google.gms:google-services:4.3.15'

        // NOTE: 2.9.4 has issues: https://github.com/invertase/react-native-firebase/issues/6983
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.2'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://www.jitpack.io' }
    }
    configurations.all {
        resolutionStrategy {
            force 'com.facebook.fbjni:fbjni:0.5.1'
        }
    }
}
// @generated begin detox-import - expo prebuild (DO NOT MODIFY) sync-1c7ed0e9d1c19e4a2b5b79bb7ec877ac879fce8d
def detoxMavenPath = new File(["node", "--print", "require.resolve('detox/package.json')"].execute(null, rootDir).text.trim(), "../Detox-android")
allprojects { repositories { maven { url(detoxMavenPath) } } }
// @generated end detox-import

subprojects {
    afterEvaluate { project ->
        if (project.hasProperty("android")) {
            project.android.namespace = project.android.namespace ?: "land.fx.blox"
            def manifestFile = file("${project.projectDir}/src/main/AndroidManifest.xml")
            if (manifestFile.exists()) {
                def manifestContent = manifestFile.getText('UTF-8')
                if (manifestContent.contains('package=')) {
                    println "Removing package attribute from ${manifestFile}"
                    manifestContent = manifestContent.replaceAll(/package="[^"]*"/, '')
                    manifestFile.write(manifestContent, 'UTF-8')
                }
            }
        }
    }
}
